{-# LANGUAGE BangPatterns, Strict #-}

import Test.QuickCheck 
import Criterion.Main
import Data.List hiding (sortBy)

main :: IO ()
main = mapM_ quickCheck [ prop f | (_, f) <- sortfuncs ] >>
  defaultMain
    [ bgroup name [ bench desc $ whnf func sample
                  | (desc, sample) <- samples ] 
    | (name, func) <- sortfuncs
    ] 
  where
    prop f xs = f xs == sort xs 

type Name = String 

sortfuncs :: [(Name, [Int] -> [Int])]
sortfuncs = [ ("Built-in Mergesort",         mergesort)
            , ("Classic Bottom-Up Mergsort", mergesort')
            , ("Insertion Sort",             inssort)
            , ("Tail Call Insertion Sort",   inssort')
            , ("Newbie's Quicksort",         qsort)
            , ("Classic Haskell Quicksort",  hqsort)
            , ("Bird's Quicksort",           bqsort)
            , ("Threey-way Quicksort",       tqsort)
            , ("Insertion Sort + Quicksort", iqsort)
            ]

mergesort, mergesort', inssort, inssort', qsort, iqsort, hqsort, bqsort, tqsort :: [Int] -> [Int] 

inssort = foldr insert [] 

inssort' = foldl' (flip insert) []

qsort [] = [] 
qsort (x:xs) = qsort ys ++ x:qsort zs 
  where ys = filter (<x)  xs
        zs = filter (>=x) xs

hqsort [] = []
hqsort (x:xs) = hqsort ys ++ x:hqsort zs
  where (ys, zs) = partition (<x) xs 

bqsort [] = []
bqsort (x:xs) = sortp xs [] [] 
  where
    sortp [] us vs     = bqsort us ++ (x:bqsort vs)
    sortp (y:ys) us vs =
      if y < x then sortp ys (y:us) vs else sortp ys us (y:vs)

tqsort [] = []
tqsort (x:xs) = sortp xs [] 1 [] 
  where
    sortp [] us w vs     = tqsort us ++ replicate w x ++ tqsort vs
    sortp (y:ys) us w vs =
      case compare y x of
        LT -> sortp ys (y:us) w vs
        EQ -> sortp ys us (1+w) vs
        GT -> sortp ys us w (y:vs)

iqsort []     = []
iqsort (x:xs) = sortp xs [] [] 1
  where
    sortp [] us vs n     =
      if n <= 8 then inssort us ++ x:inssort vs else iqsort us ++ (x:iqsort vs)
    sortp (y:ys) us vs n =
      if y < x then sortp ys (y:us) vs (1+n) else sortp ys us (y:vs) (1+n)

mergesort = sortBy compare
sortBy cmp = mergeAll . sequences
  where
    sequences (a:b:xs)
      | a `cmp` b == GT = descending b [a]  xs
      | otherwise       = ascending  b (a:) xs
    sequences xs = [xs]

    descending a as (b:bs)
      | a `cmp` b == GT = descending b (a:as) bs
    descending a as bs  = (a:as): sequences bs

    ascending a as (b:bs)
      | a `cmp` b /= GT = ascending b (\ys -> as (a:ys)) bs
    ascending a as bs   = let !x = as [a]
                          in x : sequences bs

    mergeAll [x] = x
    mergeAll xs  = mergeAll (mergePairs xs)

    mergePairs (a:b:xs) = let !x = merge a b
                          in x : mergePairs xs
    mergePairs xs       = xs

    merge as@(a:as') bs@(b:bs')
      | a `cmp` b == GT = b:merge as  bs'
      | otherwise       = a:merge as' bs
    merge [] bs         = bs
    merge as []         = as
      
mergesort' = mergeAll . fmap (:[]) 
  where
    mergeAll []  = []
    mergeAll [x] = x
    mergeAll xs  = mergeAll (mergePairs xs)

    mergePairs (a:b:xs) = let !x = merge a b
                          in x : mergePairs xs
    mergePairs xs       = xs

    merge as@(a:as') bs@(b:bs')
      | a `compare` b == GT = b:merge as  bs'
      | otherwise       = a:merge as' bs
    merge [] bs         = bs
    merge as []         = as

samples = 
  [ ("reverse [1..10]", reverse [1..10])
  , ("reverse [1..100", reverse [1..100])
--  , ("reverse [1..1000]", reverse [1..1000])
  , ("[1..10]", [1..10])
  , ("[1..100]", [1..100])
  , ("[1..1000]", [1..1000])
  , ("replicate 100 5", replicate 100 5)
  , ("replicate 1000 5", replicate 1000 5)
  , ("[-89, 74, 8, 10, 34]", [-89, 74, 8, 10, 34])
  , ("random 256-element list", [-25,24,23,-17,12,4,-25,18,-28,-22,-17,-21,2,8,-10,19,-22,3,20,15,-8,-5,-2,-10,-14,13,-3,18,-18,11,-24,-4,-28,-1,-29,-8,0,-14,12,25,-15,-19,14,-14,-30,23,-20,24,-17,-11,3,22,-18,3,27,4,-13,-25,5,-7,-17,19,-19,4,-3,29,-19,-3,11,23,27,-23,-29,-5,-26,-22,-26,5,-2,8,24,-19,-10,-14,-16,2,-24,5,10,-18,-14,6,30,14,-24,-22,-29,8,6,10,9,-30,25,-19,28,28,22,-8,9,9,-18,-10,9,10,-27,-22,-27,-18,-4,18,15,12,-25,28,0,1,-6,-3,10,-13,-12,21,19,-16,2,-3,-27,-23,2,26,-29,25,8,-12,-17,23,3,-3,15,16,-11,18,-13,-28,-21,18,-16,11,-30,29,-25,8,6,-14,27,28,-26,-2,17,-4,4,14,5,-20,16,-14,-27,-5,-23,29,-6,22,4,-29,-16,-4,2,1,-7,29,15,0,23,-21,-20,-3,1,-14,-7,-17,22,26,11,28,0,-23,18,22,-21,11,-9,6,7,-13,13,-10,3,3,-8,10,-11,-22,-6,11,14,-26,9,-25,13,0,10,8,11,3,-9,-20,-4,21,-28,17,1,9,22,-17,-10,-28,-12,-16,-18,-5,22,16,13,-22,25,11])
  , ("random 512-element lit", [103,84,217,187,111,69,86,201,146,35,84,51,123,76,218,145,115,130,238,140,103,223,176,49,146,229,255,22,182,23,249,71,161,84,221,1,184,74,180,127,124,155,13,158,219,75,162,108,36,127,90,252,45,190,65,151,36,69,122,216,14,199,139,4,164,86,228,55,156,16,43,182,220,133,78,111,76,133,220,67,58,241,245,193,220,115,115,203,254,34,233,194,240,153,76,31,114,216,87,32,104,148,155,194,104,23,110,200,228,185,18,86,254,226,255,184,89,136,159,34,226,180,122,181,2,155,136,192,14,36,159,91,195,37,116,67,191,21,9,148,151,71,50,236,31,51,134,14,165,191,255,4,208,155,78,0,197,165,192,84,202,134,142,162,158,4,214,53,22,24,201,8,50,199,22,226,205,154,240,75,94,42,145,98,221,54,212,217,52,120,123,147,74,239,175,127,89,50,254,18,127,255,92,64,24,187,212,122,151,50,193,84,59,253,153,61,225,215,7,141,17,80,78,109,66,236,106,76,198,242,34,117,254,230,96,40,192,15,1,59,148,241,14,27,36,6,248,117,106,75,236,151,150,0,116,180,208,104,55,74,28,67,77,216,28,10,114,169,211,0,208,134,157,207,65,65,82,54,98,169,75,219,16,91,210,90,90,78,21,74,228,207,75,6,241,111,197,196,171,250,157,1,119,66,53,121,112,72,9,136,175,96,18,235,212,62,74,250,157,16,73,230,247,27,206,235,215,164,234,134,168,117,64,205,167,202,216,209,72,36,228,204,33,146,222,237,248,45,23,19,205,209,12,201,2,120,36,51,29,114,15,71,225,117,140,211,116,81,202,64,249,156,3,67,130,117,223,104,209,70,173,54,180,39,117,174,163,39,65,120,61,65,27,244,114,122,16,243,41,232,93,51,157,186,208,220,174,7,220,217,61,59,157,109,198,166,178,45,63,22,253,12,85,44,136,180,74,194,159,14,124,229,193,140,172,98,67,162,249,101,166,96,171,218,218,152,125,240,8,129,99,86,62,189,163,60,192,22,233,111,133,58,9,55,56,16,209,134,119,251,105,10,7,56,169,205,108,189,195,18,183,54,94,136,47,254,254,249,114,144,237,1,59,234,35,27,41,80,120,38,127,104,32,254,42,13,56,184,48,193,34,172])
  , ("random 1024-elemnt list", [129,114,54,134,62,209,25,21,132,245,222,206,54,39,85,229,163,56,72,239,119,30,206,11,16,45,198,116,83,153,214,94,190,101,117,64,215,152,59,220,199,118,54,212,17,45,253,210,234,214,18,68,130,89,94,95,24,256,71,35,54,45,190,19,109,0,63,35,0,36,221,23,182,43,214,32,94,161,147,36,92,60,164,42,152,208,95,31,162,101,246,39,150,54,70,15,39,230,63,168,14,33,226,164,79,86,209,146,240,245,50,17,212,10,55,127,99,46,89,239,91,212,84,210,167,138,21,91,242,194,61,147,184,152,152,20,195,227,239,86,158,154,93,172,231,20,141,7,207,100,47,248,92,155,181,94,82,201,175,143,83,11,15,10,239,174,47,199,196,172,35,211,185,41,132,78,8,72,87,82,53,99,156,48,33,220,192,91,250,124,240,3,10,105,69,41,220,128,155,206,51,84,127,171,212,246,231,171,41,68,242,184,236,214,137,166,80,143,79,208,174,145,182,52,237,132,225,199,235,44,33,80,177,11,161,23,13,245,61,100,122,6,192,108,182,129,181,121,225,214,57,87,178,230,57,251,212,185,64,14,38,141,32,238,72,7,202,20,163,111,101,249,73,228,184,77,174,224,255,23,94,195,234,218,64,118,219,207,159,65,65,108,13,226,132,129,240,191,52,52,88,60,133,124,239,184,123,243,171,129,94,33,121,152,115,146,196,139,252,125,203,3,252,58,208,125,119,207,39,227,67,101,163,145,8,33,134,85,109,198,17,32,40,117,54,196,132,153,185,24,46,82,60,253,38,167,88,22,213,99,178,180,172,15,40,165,242,17,234,252,127,242,211,71,163,47,196,215,106,106,84,229,127,167,189,19,225,59,58,188,197,36,185,85,113,108,141,10,145,128,153,253,254,134,29,79,239,15,102,223,98,209,169,112,168,43,131,57,188,191,75,246,213,153,98,127,161,194,233,51,38,251,25,120,151,256,201,75,242,59,173,78,94,176,110,17,76,3,44,80,229,49,108,132,182,100,89,229,7,17,201,135,215,189,199,204,120,210,247,163,211,33,202,145,118,203,19,112,1,201,98,54,72,129,183,1,164,232,7,42,248,252,148,211,226,37,66,179,69,140,20,115,51,234,91,12,127,109,241,144,199,137,158,21,133,209,181,124,48,172,184,253,62,188,144,114,160,244,206,40,6,29,161,2,189,1,99,112,37,36,78,221,178,40,85,158,41,92,26,214,148,34,115,218,220,134,8,105,99,240,26,23,33,222,184,89,172,159,34,216,196,242,33,165,149,192,196,67,225,162,133,125,235,183,158,95,183,165,244,206,249,174,153,198,195,93,18,80,7,179,82,220,221,154,203,177,4,158,56,51,2,238,178,188,243,104,172,45,118,239,172,255,28,34,186,237,128,141,37,130,32,230,210,34,29,137,25,31,71,194,185,189,61,227,8,83,188,99,68,85,80,256,131,87,212,236,227,177,216,102,106,180,198,83,223,229,223,212,246,108,141,165,23,60,107,82,97,34,92,19,215,22,58,120,95,251,224,210,216,114,157,205,75,130,197,44,195,49,211,80,12,120,227,206,205,234,213,168,94,219,249,125,36,23,168,65,145,85,92,52,48,145,59,204,163,255,153,3,245,71,119,110,52,68,146,205,80,82,236,66,204,49,30,82,45,44,163,112,256,80,248,229,131,41,98,192,179,190,222,253,224,222,212,5,33,254,211,166,31,110,79,154,179,80,204,10,188,26,220,79,151,206,248,83,44,135,123,47,239,153,75,220,179,36,88,26,53,29,102,240,142,101,140,99,143,12,180,175,48,202,213,213,246,14,99,197,165,2,166,105,115,200,69,146,183,80,68,235,163,57,28,194,8,39,84,161,127,80,200,191,142,171,54,164,98,171,162,177,95,38,167,117,192,147,128,196,71,235,216,48,171,29,251,247,99,22,10,26,122,32,253,20,33,108,94,101,78,83,230,154,103,50,151,39,205,122,48,174,155,71,190,110,67,202,221,123,178,79,256,219,161,124,70,232,15,82,226,103,132,53,246,242,253,229,127,242,243,153,64,156,163,209,119,104,34,243,84,248,160,113,218,98,99,113,232,10,256,77,103,73,113,39,23,94,23,114,134,123,139,11,84,232,131,57,151,105,80,71,216,42,141,46,252,166,130,214,240,122,109,83,27,123,4,56,175,117,165,184,226,20,201,49,72,236,112,76,224,21,184,124,71,107,93,137,15,105,107,66,228,173,223,19,213,58,105,77,76,12,223,64,108,218,44,86,197,88,150,75,173,204,22,113,130,73])
  ]
